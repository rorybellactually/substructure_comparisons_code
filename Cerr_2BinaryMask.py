"""
 File Purpose: Extract binary masks for predefined cardiac substructures from a multi-label NIfTI generated by PyCeRR.
 What this script does: Loads a multi-label heart segmentation NIfTI and writes per-structure binary masks to the same folder; supports CLI or interactive batch modes.
"""

# Section: Imports
import os
import sys
import numpy as np
import nibabel as nib
from pathlib import Path

# Section: Function `extract_binary_masks`
def extract_binary_masks(nifti_file, output_dir, labels_dict):
    """
    Direct extraction of binary masks for each substructure from a multi-label NIfTI.

    Args:
        nifti_file: Path to the multi-label NIfTI file.
        output_dir: Output directory (binary masks will be saved here).
        labels_dict: Mapping {label_value: structure_name}.
    """
    print(f"Processing: {nifti_file}")

    # Check input file
    if not os.path.exists(nifti_file):
        print(f"Error: Input file not found: {nifti_file}")
        return

    # Ensure output directory
    os.makedirs(output_dir, exist_ok=True)

    # Load NIfTI
    print("Loading NIfTI file...")
    nii_img = nib.load(nifti_file)
    mask_data = nii_img.get_fdata()

    print(f"Image shape: {mask_data.shape}")
    print(f"Image dtype: {mask_data.dtype}")

    # Unique labels
    unique_labels = np.unique(mask_data)
    print(f"Unique labels in image: {unique_labels}")

    # Extract each label as a binary mask
    for label_value, structure_name in labels_dict.items():
        print(f"\nExtracting {structure_name} (label: {label_value})")

        # Check label exists
        if label_value not in unique_labels:
            print(f"Warning: Label {label_value} not found in image, skipping...")
            continue

        # Create binary mask (1 for the target label, 0 otherwise)
        binary_mask = (mask_data == label_value).astype(np.uint8)

        # Count non-zero voxels
        nonzero_count = np.count_nonzero(binary_mask)
        print(f"Non-zero voxels: {nonzero_count}")

        if nonzero_count == 0:
            print(f"Warning: No voxels found for {structure_name}")
            continue

        # Output filename and path
        output_filename = f"{structure_name.replace(' ', '_')}.nii.gz"
        output_path = os.path.join(output_dir, output_filename)

        # Create new NIfTI preserving affine and header
        binary_nii = nib.Nifti1Image(binary_mask, nii_img.affine, nii_img.header)

        # Save file
        nib.save(binary_nii, output_path)
        print(f"Saved: {output_path}")

        # Verify saved file
        if os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            print(f"File size: {file_size} bytes")
        else:
            print(f"Error: Failed to save {output_path}")

# Section: Function `process_single_patient_from_output`
def process_single_patient_from_output(patient_id, output_folder):
    """
    Process a single patient using the PyCeRR_subseg output directory.
    Binary masks will be saved directly to the given output_folder.

    Args:
        patient_id: Patient identifier.
        output_folder: Path to the PyCeRR_subseg output directory (e.g., patient_id/PyCeRR_subseg).
    """
    # Define label map (updated)
    labels_dict = {
        2: 'DL_AORTA',
        3: 'DL_LA',  # Left Atrium
        4: 'DL_LV',  # Left Ventricle
        5: 'DL_RA',  # Right Atrium
        6: 'DL_RV',  # Right Ventricle
        7: 'DL_IVC', # Inferior Vena Cava
        8: 'DL_SVC', # Superior Vena Cava
        9: 'DL_PA'   # Pulmonary Artery
    }

    # File paths
    mask_file = os.path.join(output_folder, "ct_heart.nii.gz")
    output_dir_for_masks = output_folder

    print(f"Patient ID: {patient_id}")
    print(f"Output folder: {output_folder}")
    print(f"Mask file: {mask_file}")
    print(f"Individual masks will be saved to: {output_dir_for_masks}")

    # Check input mask
    if not os.path.exists(mask_file):
        print(f"Error: Mask file not found: {mask_file}")
        return False

    # Extract masks
    extract_binary_masks(mask_file, output_dir_for_masks, labels_dict)
    return True

# Section: Function `process_single_patient`
def process_single_patient(patient_dir):
    """
    Process a single patient (for batch mode).
    Binary masks will be saved directly to patient_dir/PyCeRR_subseg_Dicom.

    Args:
        patient_dir: Path to the patient directory.
    """
    # Define label map (updated)
    labels_dict = {
        2: 'DL_AORTA',
        3: 'DL_LA',  # Left Atrium
        4: 'DL_LV',  # Left Ventricle
        5: 'DL_RA',  # Right Atrium
        6: 'DL_RV',  # Right Ventricle
        7: 'DL_IVC', # Inferior Vena Cava
        8: 'DL_SVC', # Superior Vena Cava
        9: 'DL_PA'   # Pulmonary Artery
    }

    # Paths for mask input and output directory
    mask_file = os.path.join(patient_dir, "PyCeRR_subseg_Dicom", "ct_heart.nii.gz")
    output_dir_for_masks = os.path.join(patient_dir, "PyCeRR_subseg_Dicom")

    print(f"Patient directory: {patient_dir}")
    print(f"Mask file: {mask_file}")
    print(f"Output directory for individual masks: {output_dir_for_masks}")

    # Check input mask
    if not os.path.exists(mask_file):
        print(f"Error: Mask file not found: {mask_file}")
        return False

    # Extract masks
    extract_binary_masks(mask_file, output_dir_for_masks, labels_dict)
    return True

# Section: Function `process_all_patients`
def process_all_patients(base_dir, patient_list_file):
    """
    Process all patients listed in a text file.

    Args:
        base_dir: Base directory path.
        patient_list_file: Path to a text file with patient IDs (one per line).
    """
    if not os.path.exists(patient_list_file):
        print(f"Error: Patient list file not found: {patient_list_file}")
        return

    # Read patient IDs
    with open(patient_list_file, 'r') as f:
        patient_ids = [line.strip() for line in f if line.strip()]

    print(f"Found {len(patient_ids)} patients to process")

    success_count = 0
    error_count = 0

    for i, patient_id in enumerate(patient_ids, 1):
        print(f"\n{'='*50}")
        print(f"Processing patient {i}/{len(patient_ids)}: {patient_id}")
        print(f"{'='*50}")

        # Patient directory
        patient_dir = os.path.join(base_dir, patient_id)

        if not os.path.exists(patient_dir):
            print(f"Warning: Patient directory not found: {patient_dir}")
            error_count += 1
            continue

        # Process
        try:
            if process_single_patient(patient_dir):
                success_count += 1
                print(f"✓ Successfully processed patient {patient_id}")
            else:
                error_count += 1
                print(f"✗ Failed to process patient {patient_id}")
        except Exception as e:
            error_count += 1
            print(f"✗ Error processing patient {patient_id}: {str(e)}")

    print(f"\n{'='*50}")
    print(f"Processing Summary:")
    print(f"Successfully processed: {success_count}")
    print(f"Failed: {error_count}")
    print(f"Total: {len(patient_ids)}")
    print(f"{'='*50}")

# Section: Function `main`
def main():
    """
    Main entry - supports CLI args and interactive mode.
    """
    print("Heart Substructure Binary Mask Extractor")
    print("="*50)

    # Check CLI arguments
    if len(sys.argv) == 3:
        # Called from bash script: python script.py patient_id output_folder
        # output_folder should directly be the PyCeRR_subseg directory path
        patient_id = sys.argv[1]
        output_folder = sys.argv[2]
        print(f"Processing patient {patient_id} from command line")
        success = process_single_patient_from_output(patient_id, output_folder)
        if success:
            print(f"✓ Successfully processed patient {patient_id}")
            sys.exit(0)
        else:
            print(f"✗ Failed to process patient {patient_id}")
            sys.exit(1)

    # Interactive mode (adjust paths to your environment)
    base_dir = "/home/donal/data/server2/Msc_Minghao/REQUITE"
    patient_list_file = "/home/donal/data/server2/Msc_Minghao/REQUITELog/Patients.txt"

    print("Choose processing mode:")
    print("1. Process single patient")
    print("2. Process all patients from list")

    choice = input("Enter your choice (1 or 2): ").strip()

    if choice == '1':
        patient_id_input = input("Enter patient ID: ").strip()
        patient_dir_single = os.path.join(base_dir, patient_id_input)
        if os.path.exists(patient_dir_single):
            print(f"\nProcessing single patient: {patient_id_input}")
            process_single_patient(patient_dir_single)
        else:
            print(f"Error: Patient directory not found for ID: {patient_id_input}")
    elif choice == '2':
        print("\nProcessing all patients from list...")
        process_all_patients(base_dir, patient_list_file)
    else:
        print("Invalid choice. Please enter 1 or 2.")

if __name__ == "__main__":
    main()
